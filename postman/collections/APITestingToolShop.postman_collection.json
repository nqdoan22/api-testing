{ 
	"info": {
		"_postman_id": "48b8a8a8-57bf-4f02-a9dc-a95125823331",
		"name": "APITestingToolShop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37758318"
	},
	"item": [
		{
			"name": "Create new product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== Helpers =====\r",
							"function toNum(v) {\r",
							"  if (v === null || v === undefined || v === \"\") return NaN;\r",
							"  const n = Number(v);\r",
							"  return Number.isNaN(n) ? NaN : n;\r",
							"}\r",
							"function toBool(v) {\r",
							"  if (typeof v === \"boolean\") return v;\r",
							"  const s = String(v).toLowerCase();\r",
							"  if (s === \"true\" || s === \"1\") return true;\r",
							"  if (s === \"false\" || s === \"0\") return false;\r",
							"  return undefined; // không ép được\r",
							"}\r",
							"function isJsonResponse() {\r",
							"  const ct = pm.response.headers.get(\"Content-Type\") || \"\";\r",
							"  return /^application\\/json\\b/i.test(ct);\r",
							"}\r",
							"\r",
							"// ===== Inputs (từ data file) =====\r",
							"const tcId   = pm.iterationData.get(\"TestCase ID\");\r",
							"const tcName = pm.iterationData.get(\"TestCase Name\");\r",
							"const title  = `${tcId} - ${tcName || \"Create Product\"}`;\r",
							"\r",
							"const expectedStatus     = Number(pm.iterationData.get(\"status_code\"));\r",
							"const expName            = pm.iterationData.get(\"name\");\r",
							"const expDescription     = pm.iterationData.get(\"description\");\r",
							"const expPrice           = toNum(pm.iterationData.get(\"price\"));\r",
							"const expStock           = toNum(pm.iterationData.get(\"stock\"));\r",
							"const expIsLocationOffer = toBool(pm.iterationData.get(\"is_location_offer\"));\r",
							"const expIsRental        = toBool(pm.iterationData.get(\"is_rental\"));\r",
							"const expBrandId         = toNum(pm.iterationData.get(\"brand_id\"));\r",
							"const expCategoryId      = toNum(pm.iterationData.get(\"category_id\"));\r",
							"const expProductImageId  = pm.iterationData.get(\"product_image_id\"); // có thể rỗng/nullable\r",
							"const expErrorField      = pm.iterationData.get(\"error_field\");      // cho negative\r",
							"\r",
							"// ===== 1) Status =====\r",
							"pm.test(`${title} | Status`, function () {\r",
							"  pm.response.to.have.status(expectedStatus);\r",
							"});\r",
							"\r",
							"// ===== 2) Content-Type & JSON parse =====\r",
							"pm.test(`${title} | Content-Type is JSON`, function () {\r",
							"  pm.expect(isJsonResponse(), \"Response must be application/json\").to.be.true;\r",
							"});\r",
							"\r",
							"let json = null;\r",
							"try {\r",
							"  json = pm.response.json();\r",
							"} catch (e) {\r",
							"  pm.test(`${title} | Body is valid JSON`, function () {\r",
							"    throw new Error(\"Response is not valid JSON\");\r",
							"  });\r",
							"  // nếu không parse được thì không làm các test tiếp theo\r",
							"  return;\r",
							"}\r",
							"\r",
							"// ===== 3) Positive path: 201 =====\r",
							"if (expectedStatus === 201) {\r",
							"  pm.test(`${title} | Has required keys`, function () {\r",
							"    pm.expect(json).to.include.all.keys(\r",
							"      \"name\", \"description\", \"price\", \"stock\",\r",
							"      \"is_location_offer\", \"is_rental\",\r",
							"      \"brand_id\", \"category_id\",\r",
							"      \"product_image_id\", \"id\"\r",
							"    );\r",
							"  });\r",
							"\r",
							"  pm.test(`${title} | name matches`, function () {\r",
							"    pm.expect(String(json.name)).to.eql(String(expName));\r",
							"  });\r",
							"  pm.test(`${title} | description matches`, function () {\r",
							"    pm.expect(String(json.description)).to.eql(String(expDescription));\r",
							"  });\r",
							"  pm.test(`${title} | price matches (number)`, function () {\r",
							"    pm.expect(toNum(json.price)).to.eql(expPrice);\r",
							"  });\r",
							"  pm.test(`${title} | stock matches (number)`, function () {\r",
							"    pm.expect(toNum(json.stock)).to.eql(expStock);\r",
							"  });\r",
							"  pm.test(`${title} | is_location_offer matches (boolean)`, function () {\r",
							"    if (expIsLocationOffer === undefined) {\r",
							"      pm.expect(typeof json.is_location_offer).to.eql(\"boolean\");\r",
							"    } else {\r",
							"      pm.expect(Boolean(json.is_location_offer)).to.eql(expIsLocationOffer);\r",
							"    }\r",
							"  });\r",
							"  pm.test(`${title} | is_rental matches (boolean)`, function () {\r",
							"    if (expIsRental === undefined) {\r",
							"      pm.expect(typeof json.is_rental).to.eql(\"boolean\");\r",
							"    } else {\r",
							"      pm.expect(Boolean(json.is_rental)).to.eql(expIsRental);\r",
							"    }\r",
							"  });\r",
							"  pm.test(`${title} | brand_id matches (number)`, function () {\r",
							"    pm.expect(toNum(json.brand_id)).to.eql(expBrandId);\r",
							"  });\r",
							"  pm.test(`${title} | category_id matches (number)`, function () {\r",
							"    pm.expect(toNum(json.category_id)).to.eql(expCategoryId);\r",
							"  });\r",
							"  pm.test(`${title} | product_image_id present/matches`, function () {\r",
							"    // Nếu data có giá trị thì so khớp; nếu rỗng, chỉ cần thuộc tính tồn tại (có thể null)\r",
							"    if (expProductImageId !== undefined && expProductImageId !== null && String(expProductImageId) !== \"\") {\r",
							"      pm.expect(String(json.product_image_id)).to.eql(String(expProductImageId));\r",
							"    } else {\r",
							"      pm.expect(json).to.have.property(\"product_image_id\");\r",
							"    }\r",
							"  });\r",
							"  pm.test(`${title} | id is integer`, function () {\r",
							"    pm.expect(Number.isInteger(json.id)).to.be.true;\r",
							"  });\r",
							"\r",
							"  if (pm.tests.failed) console.log(\"Debug 201 body:\", pm.response.text());\r",
							"}\r",
							"// ===== 4) Negative path: status != 201 =====\r",
							"else {\r",
							"  pm.test(`${title} | Has error field`, function () {\r",
							"    // Lấy field lỗi từ top-level hoặc từ json.errors.{field}\r",
							"    let actualErrorField = null;\r",
							"\r",
							"    const topKeys = Object.keys(json || {});\r",
							"    if (topKeys.length > 0) actualErrorField = topKeys[0];\r",
							"\r",
							"    if ((!actualErrorField || actualErrorField === \"errors\") && json && typeof json.errors === \"object\") {\r",
							"      const errKeys = Object.keys(json.errors);\r",
							"      if (errKeys.length > 0) actualErrorField = errKeys[0];\r",
							"    }\r",
							"\r",
							"    pm.expect(actualErrorField, \"No error field found in response\").to.be.a(\"string\");\r",
							"    // Nếu không có kỳ vọng cụ thể, vẫn pass vì tìm thấy field lỗi\r",
							"    if (expErrorField && String(expErrorField).length) {\r",
							"      pm.expect(actualErrorField).to.eql(String(expErrorField));\r",
							"    }\r",
							"  });\r",
							"\r",
							"  if (pm.tests.failed) console.log(\"Debug negative body:\", pm.response.text());\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"stock\": \"{{stock}}\",\r\n  \"price\": \"{{price}}\",\r\n  \"is_location_offer\": {{is_location_offer}},\r\n  \"is_rental\": {{is_rental}},\r\n  \"brand_id\": \"{{brand_id}}\",\r\n  \"category_id\": \"{{category_id}}\",\r\n  \"product_image_id\": \"{{product_image_id}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== Helpers =====\r",
							"function isJsonResponse() {\r",
							"  const ct = pm.response.headers.get(\"Content-Type\") || \"\";\r",
							"  return /^application\\/json\\b/i.test(ct);\r",
							"}\r",
							"function toNumOrNaN(v) {\r",
							"  const n = Number(v);\r",
							"  return Number.isNaN(n) ? NaN : n;\r",
							"}\r",
							"\r",
							"// ===== Inputs =====\r",
							"const tcId   = pm.iterationData.get(\"TestCase ID\");\r",
							"const tcName = pm.iterationData.get(\"TestCase Name\");\r",
							"const title  = `${tcId} - ${tcName || \"Search Invoice\"}`;\r",
							"\r",
							"const expectedStatus        = Number(pm.iterationData.get(\"status_code\"));\r",
							"const expectedDataLengthStr = pm.iterationData.get(\"data_length\"); // '', '(empty)', '10', hoặc undefined\r",
							"\r",
							"// ===== 1) Status =====\r",
							"pm.test(`${title} | Status`, function () {\r",
							"  pm.response.to.have.status(expectedStatus);\r",
							"});\r",
							"\r",
							"// ===== 2) Content-Type & JSON =====\r",
							"pm.test(`${title} | Content-Type is JSON`, function () {\r",
							"  pm.expect(isJsonResponse(), \"Response must be application/json\").to.be.true;\r",
							"});\r",
							"\r",
							"let json;\r",
							"try {\r",
							"  json = pm.response.json();\r",
							"} catch (e) {\r",
							"  pm.test(`${title} | Body is valid JSON`, function () {\r",
							"    throw new Error(\"Response is not valid JSON\");\r",
							"  });\r",
							"  return; // dừng nếu không parse được\r",
							"}\r",
							"\r",
							"// ===== 3) Positive path: 200 =====\r",
							"if (expectedStatus === 200) {\r",
							"  // Cấu trúc: có field data là mảng\r",
							"  pm.test(`${title} | Has data array`, function () {\r",
							"    pm.expect(json, \"Body must be an object\").to.be.an(\"object\");\r",
							"    pm.expect(json, \"Missing 'data' field\").to.have.property(\"data\");\r",
							"    pm.expect(json.data, \"'data' must be an array\").to.be.an(\"array\");\r",
							"  });\r",
							"\r",
							"  // Chỉ kiểm tra length khi có chỉ thị trong data file\r",
							"  if (expectedDataLengthStr !== undefined && expectedDataLengthStr !== null) {\r",
							"    if (expectedDataLengthStr === \"(empty)\") {\r",
							"      pm.test(`${title} | data length = 0`, function () {\r",
							"        pm.expect(json.data.length).to.eql(0);\r",
							"      });\r",
							"    } else if (expectedDataLengthStr === \"\") {\r",
							"      pm.test(`${title} | data length > 0`, function () {\r",
							"        pm.expect(json.data.length).to.be.above(0);\r",
							"      });\r",
							"    } else {\r",
							"      const expectedLength = toNumOrNaN(expectedDataLengthStr);\r",
							"      pm.test(`${title} | data length = ${expectedDataLengthStr}`, function () {\r",
							"        pm.expect(Number.isNaN(expectedLength), \"data_length must be a number\").to.be.false;\r",
							"        pm.expect(json.data.length).to.eql(expectedLength);\r",
							"      });\r",
							"    }\r",
							"  }\r",
							"\r",
							"  // (Tuỳ chọn) Nếu bạn có phân trang, có thể kiểm tra thêm:\r",
							"  // pm.test(`${title} | has pagination fields`, function () {\r",
							"  //   pm.expect(json).to.include.any.keys(\"total\", \"page\", \"limit\");\r",
							"  // });\r",
							"}\r",
							"// ===== 4) Negative path: status != 200 =====\r",
							"else {\r",
							"  // Tối thiểu: có thông tin lỗi để người dùng hiểu\r",
							"  pm.test(`${title} | Has error info`, function () {\r",
							"    const topKeys = Object.keys(json || {});\r",
							"    // chấp nhận message/error hoặc errors dạng object\r",
							"    const hasMessage = typeof json.message === \"string\" || typeof json.error === \"string\";\r",
							"    const hasErrorsObj = json.errors && typeof json.errors === \"object\";\r",
							"    pm.expect(hasMessage || hasErrorsObj || topKeys.length > 0, \"No recognizable error fields\").to.be.true;\r",
							"  });\r",
							"}\r",
							"\r",
							"// (Tùy chọn) log body khi fail để debug nhanh\r",
							"if (pm.tests.failed) {\r",
							"  console.log(\"Debug body:\", pm.response.text());\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/invoices/search",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"invoices",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add to favorite",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const tcId   = pm.iterationData.get(\"TestCase ID\");\r",
							"const tcName = pm.iterationData.get(\"TestCase Name\");\r",
							"const expectedStatus     = Number(pm.iterationData.get(\"status_code\"));\r",
							"const expectedProductId  = Number(pm.iterationData.get(\"product_id\"));\r",
							"const expectedUserId     = Number(pm.collectionVariables.get(\"user_id\")); // lấy từ login\r",
							"\r",
							"const title = `${tcId} - ${tcName || \"API test\"}`;\r",
							"\r",
							"pm.test(`${title} | Status`, function () {\r",
							"  pm.response.to.have.status(expectedStatus);\r",
							"});\r",
							"\r",
							"if (expectedStatus === 201) {\r",
							"  let json;\r",
							"  try {\r",
							"    json = pm.response.json();\r",
							"  } catch (e) {\r",
							"    pm.test(`${title} | Response is JSON`, function () {\r",
							"      throw new Error(\"Response is not valid JSON\");\r",
							"    });\r",
							"    return;\r",
							"  }\r",
							"\r",
							"  pm.test(`${title} | Has required keys`, function () {\r",
							"    pm.expect(json).to.include.all.keys(\"product_id\", \"user_id\", \"id\");\r",
							"  });\r",
							"\r",
							"  pm.test(`${title} | product_id matches expected`, function () {\r",
							"    pm.expect(json.product_id).to.eql(expectedProductId);\r",
							"  });\r",
							"\r",
							"  pm.test(`${title} | id is integer`, function () {\r",
							"    pm.expect(Number.isInteger(json.id)).to.be.true;\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"product_id\": {{product_id}}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/favorites",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"favorites"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// ===== Inputs =====\r",
					"const baseUrl   = pm.environment.get(\"base_url\") || pm.variables.get(\"base_url\");\r",
					"const email     = pm.iterationData.get(\"email\");\r",
					"const password  = pm.iterationData.get(\"password\");\r",
					"\r",
					"// (Tuỳ chọn) override method/url từ CSV\r",
					"const method  = pm.iterationData.get(\"method\");\r",
					"const csvUrl  = pm.iterationData.get(\"url\");\r",
					"if (method) pm.request.method = method;\r",
					"if (csvUrl) pm.request.url = csvUrl;\r",
					"\r",
					"// ===== Helpers =====\r",
					"function upsertHeader(k, v) { pm.request.headers.upsert({ key: k, value: v }); }\r",
					"function removeHeader(k) { try { pm.request.headers.remove(k); } catch (e) {} }\r",
					"\r",
					"// ===== Thêm query param q (an toàn, không dùng new URL) =====\r",
					"const q = pm.iterationData.get(\"q\");\r",
					"if (q !== undefined && q !== null) {\r",
					"  const cur = pm.request.url.toString();\r",
					"  const sep = cur.includes(\"?\") ? \"&\" : \"?\";\r",
					"  pm.request.url = `${cur}${sep}q=${encodeURIComponent(String(q))}`;\r",
					"}\r",
					"\r",
					"// ===== Đảm bảo Content-Type cho body raw =====\r",
					"if ([\"POST\", \"PUT\", \"PATCH\"].includes(pm.request.method)) {\r",
					"  if (pm.request.body && pm.request.body.mode === \"raw\") {\r",
					"    upsertHeader(\"Content-Type\", \"application/json\");\r",
					"  }\r",
					"}\r",
					"\r",
					"// ===== Auth: chỉ login khi có đủ email + password =====\r",
					"if (email && password && baseUrl) {\r",
					"  pm.sendRequest({\r",
					"    url: `${baseUrl.replace(/\\/$/, \"\")}/users/login`,\r",
					"    method: \"POST\",\r",
					"    header: { \"Content-Type\": \"application/json\" },\r",
					"    body: { mode: \"raw\", raw: JSON.stringify({ email, password }) }\r",
					"  }, (err, res) => {\r",
					"    if (err || !res || res.code !== 200) {\r",
					"      pm.collectionVariables.unset(\"accessToken\");\r",
					"      removeHeader(\"Authorization\");\r",
					"      return;\r",
					"    }\r",
					"    const token = res.json()?.access_token;\r",
					"    if (token) {\r",
					"      pm.collectionVariables.set(\"accessToken\", token);\r",
					"      upsertHeader(\"Authorization\", `Bearer ${token}`);\r",
					"    } else {\r",
					"      pm.collectionVariables.unset(\"accessToken\");\r",
					"      removeHeader(\"Authorization\");\r",
					"    }\r",
					"  });\r",
					"} else {\r",
					"  // Thiếu email/password => không login => chắc chắn không có Authorization\r",
					"  pm.collectionVariables.unset(\"accessToken\");\r",
					"  removeHeader(\"Authorization\");\r",
					"  if (pm.request.auth) pm.request.auth = null;\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8091"
		},
		{
			"key": "accessToken",
			"value": ""
		}
	]
}